#!/bin/bash
# By graysky <graysky AT archlinux DOT us>
# Inspired by some code originally  written by Colin Verot

# nothing to do if there is no conf file
if [[ ! -f /etc/conf.d/psd ]]; then
	echo "Cannnot find /etc/conf.d/psd so bailing.  Reinstall package to use profile-sync-daemon."
	exit 0
else
	. /etc/conf.d/psd
fi

# nothing to do if there are no users
if [[ -z "$USERS" ]]; then
	echo "Must define at least one user in /etc/conf.d/psd"
	exit 0
fi

BROWSERS=${BROWSERS:-"chromium google-chrome midori mozilla opera opera-next qupzilla conkeror.mozdev.org"} # all supported browsers

[[ -z "$VOLATILE" ]] && VOLATILE="/tmp"

set_which() {
	local user=$1
	local browser=$2
	local homedir="$(getent passwd $SUDO_USER | grep $user | cut -d: -f6)"

	# reset global variables
	BACKUP=
	DIR=

	# skip homeless users
	if [[ -z $homedir ]]; then
		return
	fi

	case "$browser" in
		chromium|google-chrome|midori)
			BACKUP="$homedir/.config/$browser-backup"
			DIR="$homedir/.config/$browser"
			;;
		mozilla|opera|opera-next|qupzilla|conkeror.mozdev.org)
			BACKUP="$homedir/.$browser-backup"
			DIR="$homedir/.$browser"
			;;
		*)
			# skip invalid browser entries
			return
	esac
}

sync() {
	# sync profiles to tmpfs and back again
	local browser user
	for user in $USERS; do
		for browser in $BROWSERS; do
			set_which "$user" "$browser"

			# make tmpfs container
			if [[ -d $DIR ]]; then
				[[ -r "$VOLATILE/$user-$browser" ]] || install -dm755 --owner=$user --group=$user "$VOLATILE/$user-$browser"

				# backup target and link to tmpfs container
				if [[ $(readlink "$DIR") != "$VOLATILE/$user-$browser" ]]; then
					mv "$DIR" "$BACKUP"
					ln -s "$VOLATILE/$user-$browser" "$DIR"
					chown -h $user:$user "$DIR"
				fi

				# sync the tmpfs targets to the disc
				if [[ -e $DIR/.flagged ]]; then
					rsync -aog --delete --exclude .flagged "$DIR/" "$BACKUP/"
				else
					rsync -aog "$BACKUP/" "$DIR/"
					touch "$DIR/.flagged"
				fi
			fi
		done
	done
}

debug() {
	# sync profiles to tmpfs and back again
	local browser user
	for user in $USERS; do
		for browser in $BROWSERS; do
			set_which "$user" "$browser"
			echo $user:$homedir:$browser
		done
	done
}


check() {
	# crash recovery
	local browser user
	for user in $USERS; do
		for browser in $BROWSERS; do
			set_which "$user" "$browser"
			[[ -h $DIR ]] && unlink "$DIR"
			[[ -d $BACKUP ]] && mv "$BACKUP" "$DIR"
		done
	done
}

unsync() {
	# restore virgin state of profiles on physical discs
	local browser user
	for user in $USERS; do
		for browser in $BROWSERS; do
			set_which "$user" "$browser"
			# check if user has browser profile
			if [[ -h "$DIR" ]]; then
				unlink "$DIR"
				# this assumes that the backup is always updated so be sure to invoke a sync
				# before an unsync
				#
				# restore original dirtree
				[[ -d "$BACKUP" ]] && mv "$BACKUP" "$DIR"
				[[ -d "$VOLATILE/$user-$browser" ]] && rm -rf "$VOLATILE/$user-$browser"
			fi
		done
	done
}

case "$1" in
	debug)
		debug
		;;
	sync)
		[[ ! -f $PIDFILE ]] && check
		sync
		;;
	resync)
		[[ -f $PIDFILE ]] && sync
		;;
	unsync)
		# make sure the daemon is running
		[[ -f $PIDFILE ]] && sync && unsync
		;;
	*) 
		echo -en "\E[31musage: $0 {sync}"
		tput sgr0 # reset colors to normal
		echo
		echo "sync) force a manual sync"
		;;
esac
exit 0
